# Libint2Config.cmake
# -------------------
#
# Libint2 cmake module.
# This module sets the following variables in your project:
#
# ::
#
##   Libint2_FOUND - true if Libint2 and all required components found on the system
##   Libint2_VERSION - Libint2 version in format Major.Minor.Release
##   Libint2_INCLUDE_DIRS - Directories where Libint2 and libderiv headers are located.
##   Libint2_INCLUDE_DIR - same as DIRS
##   Libint2_DEFINITIONS - definitions necessary to use Libint2
##   Libint2_LIBRARIES - Libint2 and libderiv libraries to link against.
##   Libint2_LIBRARY - same as LIBRARIES
##   Libint2_MAX_AM_ERI - maximum angular momentum level of Libint2 libraries
##
##
## Available components: shared static MAX_AM_ERI
##
## ::
##
##   shared - search for only shared library
##   static - search for only static library
##   [3, 10] - search for library with angular momentum >= this integer
#
#
# Exported targets:
#
# ::
#
# If Libint2 is found, this module defines the following :prop_tgt:`IMPORTED`
## targets. Target is shared _or_ static, so, for both, use separate, not
## overlapping, installations. ::
##
##   Libint::libint - the main libint and libderiv libraries with headers & defs attached.
##   Libint::int - the main libint library with header & defs attached.
##   Libint::deriv - the main libderiv library with header & defs attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(Libint2)
##   find_package(Libint 1.1.6 EXACT CONFIG REQUIRED COMPONENTS shared 6)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   Libint2_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_Libint2 - CMake variable, disables 
#     find_package(Libint2) when not REQUIRED, perhaps to force internal build

@PACKAGE_INIT@

set(PN Libint2)
set (_valid_components
    static
    shared
#    3
#    4
#    5
#    6
#    7
#    8
#    9
#    10
)

if(@BUILD_SHARED@)
    set(${PN}_shared_FOUND 1)
endif()
if(@BUILD_STATIC@)
    set(${PN}_static_FOUND 1)
endif()
list(FIND ${PN}_FIND_COMPONENTS "shared" _seek_shared)
list(FIND ${PN}_FIND_COMPONENTS "static" _seek_static)


## find includes
#unset(_temp_h CACHE)
#find_path(_temp_h
#          NAMES libint/libint.h
#          PATHS ${PACKAGE_PREFIX_DIR}/@CMAKE_INSTALL_INCLUDEDIR@
#          NO_DEFAULT_PATH)
#if(_temp_h)
#    set(${PN}_INCLUDE_DIR "${_temp_h}")
#    set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
#else()
#    set(${PN}_FOUND 0)
#    if(NOT CMAKE_REQUIRED_QUIET)
#        message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
#    endif()
#endif()

## check AM component
##   * Psi4 uses MAX_AM_ERI (formerly LIBINT_OPT_AM) for AM control
##   * libint.h uses LIBINT_MAX_AM = MAX_AM_ERI + 1
##   * libint.h uses LIBINT_OPT_AM = ceiling(LIBINT_MAX_AM / 2)
#file(READ ${${PN}_INCLUDE_DIR}/libint/libint.h _contents)
#string(REGEX MATCH "define LIBINT_MAX_AM (.|..)" DA_LINE ${_contents})
#math(EXPR ${PN}_MAX_AM_ERI ${CMAKE_MATCH_1}-1)
#foreach(_comp IN LISTS ${PN}_FIND_COMPONENTS)
#    list(FIND _valid_components ${_comp} _seek_am)
#    if(_seek_am GREATER 1)  # component is AM, not shared or static
#        # detected >= requested
#        if(NOT ${${PN}_MAX_AM_ERI} LESS ${_comp})
#            set(${PN}_${_comp}_FOUND 1)
#        else()
#            if(NOT CMAKE_REQUIRED_QUIET)
#                message(STATUS "${PN}Config missing component: requested AM ${_comp} > ${${PN}_MAX_AM_ERI} detected in ${${PN}_LIBRARY}")
#            endif()
#        endif()
#    endif()
#endforeach()
#set(${PN}_DEFINITIONS "USING_${PN};MAX_AM_ERI=${${PN}_MAX_AM_ERI}")

check_required_components(${PN})

##-----------------------------------------------------------------------------
## Don't include targets if this file is being picked up by another
## project which has already built this as a subproject
##-----------------------------------------------------------------------------
#if(NOT TARGET ${PN}::int)
#    include("${CMAKE_CURRENT_LIST_DIR}/LibintintTargets.cmake")
#endif()
#if(NOT TARGET ${PN}::deriv)
#    include("${CMAKE_CURRENT_LIST_DIR}/LibintderivTargets.cmake")
#endif()
#if(NOT TARGET ${PN}::libint)
#    add_library(${PN}::libint UNKNOWN IMPORTED)
#    set_target_properties(${PN}::libint PROPERTIES
#        IMPORTED_LOCATION                 "${_temp_deriv}"
#        INTERFACE_INCLUDE_DIRECTORIES     "${${PN}_INCLUDE_DIRS}"
#        INTERFACE_COMPILE_DEFINITIONS     "${${PN}_DEFINITIONS}"
#        IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
#        INTERFACE_LINK_LIBRARIES          ${PN}::int)
#endif()

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::cxx)
    if(_seek_static GREATER -1)
        include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets-static.cmake")
    else()
        include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets-shared.cmake")
    endif()

    include(CMakeFindDependencyMacro)
    if(NOT TARGET Eigen3::Eigen)
        find_dependency(Eigen3)
    #    find_dependency(TargetHDF5 @TargetHDF5_VERSION@ EXACT)
    endif()

    get_property(_loc TARGET ${PN}::cxx PROPERTY LOCATION)
    set(${PN}_LIBRARY ${_loc})
    get_property(_ill TARGET ${PN}::cxx PROPERTY INTERFACE_LINK_LIBRARIES)
    set(${PN}_LIBRARIES ${_ill})

    get_property(_id TARGET ${PN}::cxx PROPERTY INCLUDE_DIRECTORIES)
    set(${PN}_INCLUDE_DIR ${_id})
    get_property(_iid TARGET ${PN}::cxx PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
    set(${PN}_INCLUDE_DIRS ${_iid})

    message("Libint2::cxx")
    message("loc ${_loc}")
    message("ill ${_ill}")
    message("id  ${_id}")
    message("iid ${_iid}")
endif()
